/*
 * track.java
 *
 * Generated with Matisse Schema Definition Language 9.1.12
 * Generation date: Thu Dec 09 10:02:18 2021
 */

// Note: the package and extends declarations are generated by mt_sdl, do not modify them

package TrackList;

import com.matisse.reflect.*;

/**
 * <code>track</code> is a schema class generated by <code>mt_sdl</code>.
 * Any user-written classes will be found at the end of the file, after
 * the '// END of Matisse SDL Generated Code' comment.
 * Attribute types, default values, and relationship minimum and maximum
 * cardinality are stored in the database itself, not in this source code.
 * For more information, see <i>Getting Started with MATISSE</i>.
 */
public class track extends com.matisse.reflect.MtObject {

    // BEGIN Matisse SDL Generated Code
    // DO NOT MODIFY UNTIL THE 'END of Matisse SDL Generated Code' MARK BELOW
    /*
     * Generated with Matisse Schema Definition Language 9.1.12
     * Generation Date: Thu Dec 09 10:02:18 2021
     */

    /*
     * Class variables and methods
     */

    /** Class <code>track</code> cache ID */
    private static int CID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtClass.Loader("TrackList.track"));

    /**
     * Gets the <code>track</code> class descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db a database
     * @return a class descriptor
     */
    public static com.matisse.reflect.MtClass getClass(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtClass)db.getCachedObject(CID);
    }

    /**
     * Factory constructor. This constructor is called by <code>MtObjectFactory</code>.
     * It is public for technical reasons but is not intended to be called
     * directly by user methods.
     * @param db a database
     * @param mtOid an existing object ID in the database
     */
    public track(com.matisse.MtDatabase db, int mtOid)  {
        super(db, mtOid);
    }

    /**
     * Cascaded constructor, used by subclasses to create a new object in the database.
     * It is protected for technical reasons but is not intended to be called
     * directly by user methods.
     * @param mtCls a class descriptor (the class to instantiate)
     */
    protected track(com.matisse.reflect.MtClass mtCls)  {
        super(mtCls);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>instanceIterator(track.class);
    }

    /**
     * Opens an iterator on all instances of this class (and its subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> instanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>instanceIterator(numObjPerBuffer, track.class);
    }

    /**
     * Counts the number of instances of this class (and its subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getInstanceNumber();
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db) {
        return getClass(db).<E>ownInstanceIterator(track.class);
    }

    /**
     * Opens an iterator on all own instances of this class (excluding subclasses).
     * @param <E> a MtObject class     * @param db a database
     * @param numObjPerBuffer maximum number of objects to fetch from the server at a time
     * @return an object iterator
     */
    public static <E extends com.matisse.reflect.MtObject> com.matisse.MtObjectIterator<E> ownInstanceIterator(com.matisse.MtDatabase db, int numObjPerBuffer) {
        return getClass(db).<E>ownInstanceIterator(numObjPerBuffer, track.class);
    }

    /**
     * Counts the number of own instances of this class (excluding subclasses).
     * @param db a database
     * @return total number of instances
     */
    public static long getOwnInstanceNumber(com.matisse.MtDatabase db) {
        return getClass(db).getOwnInstanceNumber();
    }

    /*
     * Attribute access methods
     */

    /* Attribute 'TrackURI' */

    /** Attribute <code>TrackURI</code> cache ID */
    private static int trackURICID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("TrackURI",CID));

    /**
     * Gets the <code>TrackURI</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTrackURIAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(trackURICID);
    }


    /**
     * Gets the <code>TrackURI</code> attribute value.
     * @return the value
     *
     * @see #setTrackURI
     * @see #removeTrackURI
     */
    public final String getTrackURI() {
        return getString(getTrackURIAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>TrackURI</code> attribute value.
     * @param val the new value
     *
     * @see #getTrackURI
     * @see #removeTrackURI
     */
    public final void setTrackURI(String val) {
        setString(getTrackURIAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>TrackURI</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTrackURI
     * @see #setTrackURI
     */
    public final void removeTrackURI() {
        removeValue(getTrackURIAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTrackURI
     * @see #setTrackURI
     */
    public final boolean isTrackURINull() {
        return isNull(getTrackURIAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTrackURI
     * @see #setTrackURI
     */
    public final boolean isTrackURIDefaultValue() {
        return isDefaultValue(getTrackURIAttribute(getMtDatabase()));
    }


    /* Attribute 'TrackName' */

    /** Attribute <code>TrackName</code> cache ID */
    private static int trackNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("TrackName",CID));

    /**
     * Gets the <code>TrackName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTrackNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(trackNameCID);
    }


    /**
     * Gets the <code>TrackName</code> attribute value.
     * @return the value
     *
     * @see #setTrackName
     * @see #removeTrackName
     */
    public final String getTrackName() {
        return getString(getTrackNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>TrackName</code> attribute value.
     * @param val the new value
     *
     * @see #getTrackName
     * @see #removeTrackName
     */
    public final void setTrackName(String val) {
        setString(getTrackNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>TrackName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTrackName
     * @see #setTrackName
     */
    public final void removeTrackName() {
        removeValue(getTrackNameAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTrackName
     * @see #setTrackName
     */
    public final boolean isTrackNameNull() {
        return isNull(getTrackNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTrackName
     * @see #setTrackName
     */
    public final boolean isTrackNameDefaultValue() {
        return isDefaultValue(getTrackNameAttribute(getMtDatabase()));
    }


    /* Attribute 'ArtistURIs' */

    /** Attribute <code>ArtistURIs</code> cache ID */
    private static int artistURIsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ArtistURIs",CID));

    /**
     * Gets the <code>ArtistURIs</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtistURIsAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artistURIsCID);
    }


    /**
     * Gets the <code>ArtistURIs</code> attribute value.
     * @return the value
     *
     * @see #setArtistURIs
     * @see #removeArtistURIs
     */
    public final String getArtistURIs() {
        return getString(getArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ArtistURIs</code> attribute value.
     * @param val the new value
     *
     * @see #getArtistURIs
     * @see #removeArtistURIs
     */
    public final void setArtistURIs(String val) {
        setString(getArtistURIsAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ArtistURIs</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtistURIs
     * @see #setArtistURIs
     */
    public final void removeArtistURIs() {
        removeValue(getArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getArtistURIs
     * @see #setArtistURIs
     */
    public final boolean isArtistURIsNull() {
        return isNull(getArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtistURIs
     * @see #setArtistURIs
     */
    public final boolean isArtistURIsDefaultValue() {
        return isDefaultValue(getArtistURIsAttribute(getMtDatabase()));
    }


    /* Attribute 'ArtistNames' */

    /** Attribute <code>ArtistNames</code> cache ID */
    private static int artistNamesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("ArtistNames",CID));

    /**
     * Gets the <code>ArtistNames</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getArtistNamesAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(artistNamesCID);
    }


    /**
     * Gets the <code>ArtistNames</code> attribute value.
     * @return the value
     *
     * @see #setArtistNames
     * @see #removeArtistNames
     */
    public final String getArtistNames() {
        return getString(getArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>ArtistNames</code> attribute value.
     * @param val the new value
     *
     * @see #getArtistNames
     * @see #removeArtistNames
     */
    public final void setArtistNames(String val) {
        setString(getArtistNamesAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>ArtistNames</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getArtistNames
     * @see #setArtistNames
     */
    public final void removeArtistNames() {
        removeValue(getArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getArtistNames
     * @see #setArtistNames
     */
    public final boolean isArtistNamesNull() {
        return isNull(getArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getArtistNames
     * @see #setArtistNames
     */
    public final boolean isArtistNamesDefaultValue() {
        return isDefaultValue(getArtistNamesAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumURI' */

    /** Attribute <code>AlbumURI</code> cache ID */
    private static int albumURICID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumURI",CID));

    /**
     * Gets the <code>AlbumURI</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumURIAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumURICID);
    }


    /**
     * Gets the <code>AlbumURI</code> attribute value.
     * @return the value
     *
     * @see #setAlbumURI
     * @see #removeAlbumURI
     */
    public final String getAlbumURI() {
        return getString(getAlbumURIAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumURI</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumURI
     * @see #removeAlbumURI
     */
    public final void setAlbumURI(String val) {
        setString(getAlbumURIAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumURI</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumURI
     * @see #setAlbumURI
     */
    public final void removeAlbumURI() {
        removeValue(getAlbumURIAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumURI
     * @see #setAlbumURI
     */
    public final boolean isAlbumURINull() {
        return isNull(getAlbumURIAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumURI
     * @see #setAlbumURI
     */
    public final boolean isAlbumURIDefaultValue() {
        return isDefaultValue(getAlbumURIAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumName' */

    /** Attribute <code>AlbumName</code> cache ID */
    private static int albumNameCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumName",CID));

    /**
     * Gets the <code>AlbumName</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumNameAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumNameCID);
    }


    /**
     * Gets the <code>AlbumName</code> attribute value.
     * @return the value
     *
     * @see #setAlbumName
     * @see #removeAlbumName
     */
    public final String getAlbumName() {
        return getString(getAlbumNameAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumName</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumName
     * @see #removeAlbumName
     */
    public final void setAlbumName(String val) {
        setString(getAlbumNameAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumName</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumName
     * @see #setAlbumName
     */
    public final void removeAlbumName() {
        removeValue(getAlbumNameAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumName
     * @see #setAlbumName
     */
    public final boolean isAlbumNameNull() {
        return isNull(getAlbumNameAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumName
     * @see #setAlbumName
     */
    public final boolean isAlbumNameDefaultValue() {
        return isDefaultValue(getAlbumNameAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumArtistURIs' */

    /** Attribute <code>AlbumArtistURIs</code> cache ID */
    private static int albumArtistURIsCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumArtistURIs",CID));

    /**
     * Gets the <code>AlbumArtistURIs</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumArtistURIsAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumArtistURIsCID);
    }


    /**
     * Gets the <code>AlbumArtistURIs</code> attribute value.
     * @return the value
     *
     * @see #setAlbumArtistURIs
     * @see #removeAlbumArtistURIs
     */
    public final String getAlbumArtistURIs() {
        return getString(getAlbumArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumArtistURIs</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumArtistURIs
     * @see #removeAlbumArtistURIs
     */
    public final void setAlbumArtistURIs(String val) {
        setString(getAlbumArtistURIsAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumArtistURIs</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumArtistURIs
     * @see #setAlbumArtistURIs
     */
    public final void removeAlbumArtistURIs() {
        removeValue(getAlbumArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumArtistURIs
     * @see #setAlbumArtistURIs
     */
    public final boolean isAlbumArtistURIsNull() {
        return isNull(getAlbumArtistURIsAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumArtistURIs
     * @see #setAlbumArtistURIs
     */
    public final boolean isAlbumArtistURIsDefaultValue() {
        return isDefaultValue(getAlbumArtistURIsAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumArtistNames' */

    /** Attribute <code>AlbumArtistNames</code> cache ID */
    private static int albumArtistNamesCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumArtistNames",CID));

    /**
     * Gets the <code>AlbumArtistNames</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumArtistNamesAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumArtistNamesCID);
    }


    /**
     * Gets the <code>AlbumArtistNames</code> attribute value.
     * @return the value
     *
     * @see #setAlbumArtistNames
     * @see #removeAlbumArtistNames
     */
    public final String getAlbumArtistNames() {
        return getString(getAlbumArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumArtistNames</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumArtistNames
     * @see #removeAlbumArtistNames
     */
    public final void setAlbumArtistNames(String val) {
        setString(getAlbumArtistNamesAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumArtistNames</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumArtistNames
     * @see #setAlbumArtistNames
     */
    public final void removeAlbumArtistNames() {
        removeValue(getAlbumArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumArtistNames
     * @see #setAlbumArtistNames
     */
    public final boolean isAlbumArtistNamesNull() {
        return isNull(getAlbumArtistNamesAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumArtistNames
     * @see #setAlbumArtistNames
     */
    public final boolean isAlbumArtistNamesDefaultValue() {
        return isDefaultValue(getAlbumArtistNamesAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumReleaseDate' */

    /** Attribute <code>AlbumReleaseDate</code> cache ID */
    private static int albumReleaseDateCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumReleaseDate",CID));

    /**
     * Gets the <code>AlbumReleaseDate</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumReleaseDateAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumReleaseDateCID);
    }


    /**
     * Gets the <code>AlbumReleaseDate</code> attribute value.
     * @return the value
     *
     * @see #setAlbumReleaseDate
     * @see #removeAlbumReleaseDate
     */
    public final String getAlbumReleaseDate() {
        return getString(getAlbumReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumReleaseDate</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumReleaseDate
     * @see #removeAlbumReleaseDate
     */
    public final void setAlbumReleaseDate(String val) {
        setString(getAlbumReleaseDateAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumReleaseDate</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumReleaseDate
     * @see #setAlbumReleaseDate
     */
    public final void removeAlbumReleaseDate() {
        removeValue(getAlbumReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumReleaseDate
     * @see #setAlbumReleaseDate
     */
    public final boolean isAlbumReleaseDateNull() {
        return isNull(getAlbumReleaseDateAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumReleaseDate
     * @see #setAlbumReleaseDate
     */
    public final boolean isAlbumReleaseDateDefaultValue() {
        return isDefaultValue(getAlbumReleaseDateAttribute(getMtDatabase()));
    }


    /* Attribute 'AlbumImageURL' */

    /** Attribute <code>AlbumImageURL</code> cache ID */
    private static int albumImageURLCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AlbumImageURL",CID));

    /**
     * Gets the <code>AlbumImageURL</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAlbumImageURLAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(albumImageURLCID);
    }


    /**
     * Gets the <code>AlbumImageURL</code> attribute value.
     * @return the value
     *
     * @see #setAlbumImageURL
     * @see #removeAlbumImageURL
     */
    public final String getAlbumImageURL() {
        return getString(getAlbumImageURLAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AlbumImageURL</code> attribute value.
     * @param val the new value
     *
     * @see #getAlbumImageURL
     * @see #removeAlbumImageURL
     */
    public final void setAlbumImageURL(String val) {
        setString(getAlbumImageURLAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AlbumImageURL</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAlbumImageURL
     * @see #setAlbumImageURL
     */
    public final void removeAlbumImageURL() {
        removeValue(getAlbumImageURLAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAlbumImageURL
     * @see #setAlbumImageURL
     */
    public final boolean isAlbumImageURLNull() {
        return isNull(getAlbumImageURLAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAlbumImageURL
     * @see #setAlbumImageURL
     */
    public final boolean isAlbumImageURLDefaultValue() {
        return isDefaultValue(getAlbumImageURLAttribute(getMtDatabase()));
    }


    /* Attribute 'DiscNumber' */

    /** Attribute <code>DiscNumber</code> cache ID */
    private static int discNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("DiscNumber",CID));

    /**
     * Gets the <code>DiscNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getDiscNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(discNumberCID);
    }


    /**
     * Gets the <code>DiscNumber</code> attribute value.
     * @return the value
     *
     * @see #setDiscNumber
     * @see #removeDiscNumber
     */
    public final String getDiscNumber() {
        return getString(getDiscNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>DiscNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getDiscNumber
     * @see #removeDiscNumber
     */
    public final void setDiscNumber(String val) {
        setString(getDiscNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>DiscNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getDiscNumber
     * @see #setDiscNumber
     */
    public final void removeDiscNumber() {
        removeValue(getDiscNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getDiscNumber
     * @see #setDiscNumber
     */
    public final boolean isDiscNumberNull() {
        return isNull(getDiscNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getDiscNumber
     * @see #setDiscNumber
     */
    public final boolean isDiscNumberDefaultValue() {
        return isDefaultValue(getDiscNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'TrackNumber' */

    /** Attribute <code>TrackNumber</code> cache ID */
    private static int trackNumberCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("TrackNumber",CID));

    /**
     * Gets the <code>TrackNumber</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTrackNumberAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(trackNumberCID);
    }


    /**
     * Gets the <code>TrackNumber</code> attribute value.
     * @return the value
     *
     * @see #setTrackNumber
     * @see #removeTrackNumber
     */
    public final String getTrackNumber() {
        return getString(getTrackNumberAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>TrackNumber</code> attribute value.
     * @param val the new value
     *
     * @see #getTrackNumber
     * @see #removeTrackNumber
     */
    public final void setTrackNumber(String val) {
        setString(getTrackNumberAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>TrackNumber</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTrackNumber
     * @see #setTrackNumber
     */
    public final void removeTrackNumber() {
        removeValue(getTrackNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTrackNumber
     * @see #setTrackNumber
     */
    public final boolean isTrackNumberNull() {
        return isNull(getTrackNumberAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTrackNumber
     * @see #setTrackNumber
     */
    public final boolean isTrackNumberDefaultValue() {
        return isDefaultValue(getTrackNumberAttribute(getMtDatabase()));
    }


    /* Attribute 'TrackDuration' */

    /** Attribute <code>TrackDuration</code> cache ID */
    private static int trackDurationCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("TrackDuration",CID));

    /**
     * Gets the <code>TrackDuration</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTrackDurationAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(trackDurationCID);
    }


    /**
     * Gets the <code>TrackDuration</code> attribute value.
     * @return the value
     *
     * @see #setTrackDuration
     * @see #removeTrackDuration
     */
    public final String getTrackDuration() {
        return getString(getTrackDurationAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>TrackDuration</code> attribute value.
     * @param val the new value
     *
     * @see #getTrackDuration
     * @see #removeTrackDuration
     */
    public final void setTrackDuration(String val) {
        setString(getTrackDurationAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>TrackDuration</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTrackDuration
     * @see #setTrackDuration
     */
    public final void removeTrackDuration() {
        removeValue(getTrackDurationAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTrackDuration
     * @see #setTrackDuration
     */
    public final boolean isTrackDurationNull() {
        return isNull(getTrackDurationAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTrackDuration
     * @see #setTrackDuration
     */
    public final boolean isTrackDurationDefaultValue() {
        return isDefaultValue(getTrackDurationAttribute(getMtDatabase()));
    }


    /* Attribute 'TrackPreviewURL' */

    /** Attribute <code>TrackPreviewURL</code> cache ID */
    private static int trackPreviewURLCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("TrackPreviewURL",CID));

    /**
     * Gets the <code>TrackPreviewURL</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getTrackPreviewURLAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(trackPreviewURLCID);
    }


    /**
     * Gets the <code>TrackPreviewURL</code> attribute value.
     * @return the value
     *
     * @see #setTrackPreviewURL
     * @see #removeTrackPreviewURL
     */
    public final String getTrackPreviewURL() {
        return getString(getTrackPreviewURLAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>TrackPreviewURL</code> attribute value.
     * @param val the new value
     *
     * @see #getTrackPreviewURL
     * @see #removeTrackPreviewURL
     */
    public final void setTrackPreviewURL(String val) {
        setString(getTrackPreviewURLAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>TrackPreviewURL</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getTrackPreviewURL
     * @see #setTrackPreviewURL
     */
    public final void removeTrackPreviewURL() {
        removeValue(getTrackPreviewURLAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getTrackPreviewURL
     * @see #setTrackPreviewURL
     */
    public final boolean isTrackPreviewURLNull() {
        return isNull(getTrackPreviewURLAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getTrackPreviewURL
     * @see #setTrackPreviewURL
     */
    public final boolean isTrackPreviewURLDefaultValue() {
        return isDefaultValue(getTrackPreviewURLAttribute(getMtDatabase()));
    }


    /* Attribute 'Explicit' */

    /** Attribute <code>Explicit</code> cache ID */
    private static int explicitCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Explicit",CID));

    /**
     * Gets the <code>Explicit</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getExplicitAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(explicitCID);
    }


    /**
     * Gets the <code>Explicit</code> attribute value.
     * @return the value
     *
     * @see #setExplicit
     * @see #removeExplicit
     */
    public final boolean getExplicit() {
        return getBoolean(getExplicitAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Explicit</code> attribute value.
     * @param val the new value
     *
     * @see #getExplicit
     * @see #removeExplicit
     */
    public final void setExplicit(boolean val) {
        setBoolean(getExplicitAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Explicit</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getExplicit
     * @see #setExplicit
     */
    public final void removeExplicit() {
        removeValue(getExplicitAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getExplicit
     * @see #setExplicit
     */
    public final boolean isExplicitNull() {
        return isNull(getExplicitAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getExplicit
     * @see #setExplicit
     */
    public final boolean isExplicitDefaultValue() {
        return isDefaultValue(getExplicitAttribute(getMtDatabase()));
    }


    /* Attribute 'Popularity' */

    /** Attribute <code>Popularity</code> cache ID */
    private static int popularityCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("Popularity",CID));

    /**
     * Gets the <code>Popularity</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getPopularityAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(popularityCID);
    }


    /**
     * Gets the <code>Popularity</code> attribute value.
     * @return the value
     *
     * @see #setPopularity
     * @see #removePopularity
     */
    public final String getPopularity() {
        return getString(getPopularityAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>Popularity</code> attribute value.
     * @param val the new value
     *
     * @see #getPopularity
     * @see #removePopularity
     */
    public final void setPopularity(String val) {
        setString(getPopularityAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>Popularity</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getPopularity
     * @see #setPopularity
     */
    public final void removePopularity() {
        removeValue(getPopularityAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getPopularity
     * @see #setPopularity
     */
    public final boolean isPopularityNull() {
        return isNull(getPopularityAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getPopularity
     * @see #setPopularity
     */
    public final boolean isPopularityDefaultValue() {
        return isDefaultValue(getPopularityAttribute(getMtDatabase()));
    }


    /* Attribute 'AddedBy' */

    /** Attribute <code>AddedBy</code> cache ID */
    private static int addedByCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AddedBy",CID));

    /**
     * Gets the <code>AddedBy</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAddedByAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(addedByCID);
    }


    /**
     * Gets the <code>AddedBy</code> attribute value.
     * @return the value
     *
     * @see #setAddedBy
     * @see #removeAddedBy
     */
    public final String getAddedBy() {
        return getString(getAddedByAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AddedBy</code> attribute value.
     * @param val the new value
     *
     * @see #getAddedBy
     * @see #removeAddedBy
     */
    public final void setAddedBy(String val) {
        setString(getAddedByAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AddedBy</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAddedBy
     * @see #setAddedBy
     */
    public final void removeAddedBy() {
        removeValue(getAddedByAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAddedBy
     * @see #setAddedBy
     */
    public final boolean isAddedByNull() {
        return isNull(getAddedByAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAddedBy
     * @see #setAddedBy
     */
    public final boolean isAddedByDefaultValue() {
        return isDefaultValue(getAddedByAttribute(getMtDatabase()));
    }


    /* Attribute 'AddedAt' */

    /** Attribute <code>AddedAt</code> cache ID */
    private static int addedAtCID = com.matisse.MtDatabase.allocCID(new com.matisse.reflect.MtAttribute.Loader("AddedAt",CID));

    /**
     * Gets the <code>AddedAt</code> attribute descriptor.
     * This method supports advanced MATISSE programming techniques such as
     * dynamically modifying the schema.
     * @param db the database containing the attribute
     * @return the attribute descriptor object
     */
    public static com.matisse.reflect.MtAttribute getAddedAtAttribute(com.matisse.MtDatabase db) {
        return (com.matisse.reflect.MtAttribute)db.getCachedObject(addedAtCID);
    }


    /**
     * Gets the <code>AddedAt</code> attribute value.
     * @return the value
     *
     * @see #setAddedAt
     * @see #removeAddedAt
     */
    public final String getAddedAt() {
        return getString(getAddedAtAttribute(getMtDatabase()));
    }

    /**
     * Sets the <code>AddedAt</code> attribute value.
     * @param val the new value
     *
     * @see #getAddedAt
     * @see #removeAddedAt
     */
    public final void setAddedAt(String val) {
        setString(getAddedAtAttribute(getMtDatabase()), val);
    }

    /**
     * Removes the current <code>AddedAt</code> attribute value.
     * Falls back to the default value is there is one.  If the attribute
     * has no default value, it must be set to a new value before commit.
     *
     * @see #getAddedAt
     * @see #setAddedAt
     */
    public final void removeAddedAt() {
        removeValue(getAddedAtAttribute(getMtDatabase()));
    }

    /**
     * Check if nullable attribute value is set to MT_NULL.
     * @return true if null value
     *
     * @see #getAddedAt
     * @see #setAddedAt
     */
    public final boolean isAddedAtNull() {
        return isNull(getAddedAtAttribute(getMtDatabase()));
    }

    /**
     * Check if attribute value is set to its default value.
     * @return true if default value
     *
     * @see #getAddedAt
     * @see #setAddedAt
     */
    public final boolean isAddedAtDefaultValue() {
        return isDefaultValue(getAddedAtAttribute(getMtDatabase()));
    }


    // END of Matisse SDL Generated Code

    /*
     * You may add your own code here...
     */

    /**
     * Default constructor provided as an example.
     * You may delete this constructor or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @param db a database
     */
    public track(com.matisse.MtDatabase db) {
        super(getClass(db));
    }

    /**
     * Example of <code>toString</code> method.
     * You may delete this method or modify it to suit your needs. If you
     * modify it, please revise this comment accordingly.
     * @return a string
     */
    public java.lang.String toString() {
        return super.toString() + "[track]";
    }
}
